openapi: 3.0.0
info:
  title: BLPS Review
  description: Приложения для оставления отзывов и проведения модерации
  version: 3.0.0
servers:
  - url: http://127.0.0.1:80
    description: Локальный сервер
paths:
  /api/auth/login:
    post:
      summary: "POST api/auth/login"
      operationId: "authenticateUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDTO"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthResponse"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/auth/signup:
    post:
      summary: "POST api/auth/signup"
      operationId: "registerUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/users/link:
    get:
      summary: "GET api/users/link"
      operationId: "link"
      parameters:
        - name: "hash"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/users/{id}:
    get:
      summary: "GET api/users/{id}"
      operationId: "getUserById"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "object"
  /api/vote/:
    post:
      summary: "POST api/vote/"
      operationId: "vote"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/vote/reviews:
    get:
      summary: "GET api/vote/reviews"
      operationId: "getReviewsForModeration"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Review"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/reviews:
    get:
      summary: "GET api/reviews"
      operationId: "getAllReviews"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Review"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: "POST api/reviews"
      operationId: "createReview"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReviewDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/reviews/{id}:
    get:
      summary: "GET api/reviews/{id}"
      operationId: "getReviewById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: "PUT api/reviews/{id}"
      operationId: "updateReview"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: "DELETE api/reviews/{id}"
      operationId: "deleteReview"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        username:
          type: string
        accessToken:
          type: string
    SignUpDTO:
      type: object
      properties:
        username:
          type: string
        accessToken:
          type: string
    Review:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: object
        status:
          type: string
        votes:
          type: array
        created:
          type: string
    CreateReviewDTO:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    VoteDTO:
      type: object
      properties:
        reviewId:
          type: integer
        voteType:
          type: string

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

security:
  - bearerAuth: []